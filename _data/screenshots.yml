screenshots:
  - {
    title: 'Open a computer',
    id: 'OpenComputer',
    alt: 'Open a computer',
    thumbnail: '/files/images/open-computer.png',
    image: '/files/images/open-computer.png',
    html: '<p class="lead">
      On startup, the default action is to select a computer, which will be emulated. Users can either select
      a predefined computer, or they can "build" a new one (see below).
      </p>'
  }
  - {
    title: 'Building a computer',
    id: 'EditComputer',
    alt: 'Edit a computer',
    thumbnail: '/files/images/edit-computer.png',
    image: '/files/images/edit-computer.png',
    html: '
      <p class="lead">
      Computers used in emuStudio must be "built" before they can be used. It means a user must select computer components
      and connect them together in a <a href="/documentation/user/application/computer-schema">schema</a>.
      Computer components are plugins placed in appropriate location in emuStudio
      installation. A computer then consists of the schema and configuration, specific for this computer.
      </p>'
  }
  - {
    title: 'Programming in emuStudio',
    id: 'SourceCode',
    alt: 'Source code editor',
    thumbnail: '/files/images/source-code.png',
    image: '/files/images/source-code.png',
    html: '
      <p class="lead">
      When a computer is opened, emuStudio becomes an IDE for developing and running programs.
      The source code editor supports syntax highlighting and other tools that provide some writing comfort.
      A compiler, if provided by the computer, will translate the source code into a binary form which is
      automatically loaded in the operating memory of the computer.
      </p>'
  }
  - {
    title: 'Debugger',
    id: 'Debugger',
    alt: 'Emulator panel',
    thumbnail: '/files/images/emulator.png',
    image: '/files/images/emulator.png',
    html: '
      <p class="lead">
      When the program is compiled, it can be emulated. Debugger, in the emulator panel, is to help with
      controlling the emulation life-cycle. It shows the internals of emulated components. CPU emulation can be
      run, paused, or stopped. Users can execute just a single step or run the emulation in timed-steps.
      All provided computers support breakpoints capability.
      </p>'
  }
  - {
    title: 'Computer-user interaction',
    id: 'CPM22',
    alt: 'CP/M 2.2',
    thumbnail: '/files/images/cpm3.png',
    image: '/files/images/cpm3.png',
    html: '
      <p class="lead">
      Users can interact with the emulated computer using virtual devices. For example, a terminal. Devices
      have custom capabilities, for trying to mimic the behavior of a real-world.
      </p>
      <p class="lead">
      Take an example - <a href="/documentation/user/altair8800/88-dcdd">88-DCDD device</a> in MITS Altair8800 computer.
      This device can be used for loading disk images containing files of some original vintage software.
      </p>'
  }
  - {
    title: 'Emulation automation',
    id: 'Automation',
    alt: 'Automation',
    thumbnail: '/files/images/automation.gif',
    image: '/files/images/automation.gif',
    html: '
      <p class="lead">
      emuStudio can be run also from command line. This can be useful when we want to see just the output of
      a program being emulated instead of having to manually interact with emuStudio. Or if we want to run our
      favourite vintage operating system without boring manual setup.
      </p>
      <p class="lead">If the GUI is disabled, inputs and outputs are redirected to files.</p>'
  }
